

6/12/14:
	Worked on the Python and Java files. I've looked more into the documentation and I know the methods I need to call to the API
	for exactly what I want. Event list to get all games and then marketbook for an event list id that interests me. I'm starting
	to think about the UI so I know that there's some code thats' unnecessary right now but will be needed in the end for users to 
	pick events they want to monitor. I've found an error on the betfair api pages which caused my python code to get prices for bets
	to not work for almost a week now. It gave the wrong URL to post to which is incredibly annoying... I implemented some Java to get
	event information but it wasn't the correct method, it listed markets like Manchester to win but it wasn't for a particular game. It
	listed all markets like that for all games in my time period but didn't mention the actual game like Manchester Vs Liverpool. It would
	list manchester and liverpool markets and then other game markets without mentioning anything. Huge message today but I did spend quite
	some time today and I've forgotten about my log for a while now. Plan is to fix java code tomorrow and look into prices. I've got some 
	questions regarding the price results and the poster day to ask Richard on Monday.
	
7/12/14:
	Started looking at the odds result and I'm unsure of what exactly they mean. I've fixed the java code so that
	it does all that the python code does and gets the same results. Everything is currently hard coded in which
	will need to change but for now I can easily access the market data I want. I'm just getting the java code up
	to speed for being able to collect data by the end of the week and be ready for the project poster day.

8/12/14:
	Started and completed the required submissions for poster day. I had some issues actually calculating the probability of events
	occured but from conversations with Richard I've fixed my misunderstanding and am totally aware of what the program will be doing
	at run time, in terms of extracting probability.

9/12/14:
	Re-worded the documents a little and submitted them.

16/1/15:
	Just finished all other coursework submissions for the year so I'm working on the project again. Last time (something like 28th December
	that I forgot to log) I started on a textual front-end just so I can get some flexible interaction. I'm going to get the front end working
	so commands can be performed with user input. I'll do some tests and set it up so I can finally start collecting game results. I'm planning
	to collect by the 17th since if I want American football to work I need to do it by then. Not many games left before the NFL season ends.
	Fixed some classes used for GSON, removed a lot of parameters that the original betfair examples had that I dont need. I dont need half these
	filters. Currently deciding how I want game recording to work. Probably will have multiple timertask threads or something like that since I can do up to 10 or so requests a second.

18/1/15:
	Decided that I'm going to keep the code from the BetFair repository mostly as if, I'll just clean a few things up. I'm then going to create a class which exclusively has access to it. With the new class I'll simplify method calls and return results from the API in a nicer way, making it a lot easier when it comes to a GUI to display what I want. Going to create a "debug mode" for the app which will print out all
	request and result strings in case something goes bad, since that's what I was doing before. Currently I'm in the middle of replacing depreceated apache 4.2 code with 4.3. I'm still in the middle of writing the front end for collecting results and implementing debug mode. I'm planning on finishing by 21st. I'll then spend the week collecting results and designing/creating my GUI and creating some test cases. Currently the program crashes super hard on things like bad logins.

22/1/15:
	Not started properly working on it yet. I'm delaying collecting data right now because I've had internet going on and off most of the week so far. I've added a package for JUnit testing and I'll start on the report soon. I need to remove ssl certificate file passwords so I can
	remove my hard coding of unnecessary passwords and then I can start making the code not crash and burn when given bad passwords (since the exception won't be there in the near future). I'll finish on the Text front end today hopefully, get a few basic tests done, rename some classes and evaluate some of my older code and the betfair stuff to see if anything needs refactoring or can be removed. I also forgot to push my git changes for a while so something like 5-10 commits just got pushed on the one day off my laptop. Also need to finish replacing
	depreceated apache stuff although that's not too high on my priorities. I've started refactoring method names, I'm not 100% sure if I should really be doing it though but it's moving it from BetFair names to their logical names to another person looking at this code e.g. from getEvents to getGames.

1/2/15:
	Started working on the project again. I'm currently deciding between javafx or swing. Whilst deciding
	I'm back to working on the textual front-end that I plan on replacing soon. Plan for this week is to get the GUI partially done and have collected lots of game data. Ended up replacing most depreceated apache code. What's left is the SSL stuff I don't fully understand.

2/2/15:
	Fixed my p12 certificate and did some work on tests. Currently thinking about how I'll deal with exceptions which ties into my test strategy.

3/2/15:
	Fixed the tests, had issues with thrown exceptions not being recognised properly in the test. I added functionality to grab the list of all games in the next x days. Next up will be requesting game results and then I'll write a little class that will be used to managed Runnables which will be scheduled to start fetching data when a game starts until it's end. I still need to look into fields to see what signifys a start end, market opens before games? do markets shut at half time? etc.

4/2/15:
	Worked on the general text based ui for data gathering. Issue I've come across is that this needs multithreading. So far I wrote it so that multiple markets can be tracked at once. So I wrote a class that handles the threads and distributes the tasks. It will hand out marketids and check on the threads progress, looking to see if it's done so it can store the data in a file. Issue here is that 1. I might just request lots of the same games market data on the same thread, making it a huge pain (probably) to parse it later so I can understand what happens and so I can format it in such a way that when the program is actually doing its job, its not too bad to get the data I want. 2. The betfair code I've written is single threaded, so If I try to track multiple games at the same time then what happens is request sent -> waits for response -> gets response, while the other thread waits, now this could probably still work but it means that requests are sent at something like 2s apart and this gets to a point, where I can be tracking 5 or 6 games and trying to get data every 10s could start failing (on my bad home internet) since so much time is spent waiting. So either tonight or tomorrow I'll re-write my betfair code so that it takes in a request, then assigns that request to a thread and then waits on a reply. I need to look into thread communication again and hope I don't run into too many concurrency issues, and hopefully this isn't too bad to test that its working.
				TextualGUI class -> gets input -> gets given a task -> puts task into a shared collection
								TheadManager running on another thread -> polls shared collection -> recieves task -> assigns task to thread -> checks threads status until completion
																										Task Thread -> Recieves task -> works on task until finish condition

	I think this should be really simple though, I just want to share a list of tasks between my ui and the thread controller, which then distributes and checks on threads progress, probably via another shared list																					
	(On actual program, could work the same way with the manager running and instead of saving stuff to a file, it adds it to some form of collection it works on)

4/2/15:
	Decided that I'll get a quick program written that can take results for me, so that i have something done before I meet with Richard on Friday and I hope to finish this multi threaded thing by the weekend. So far sketched it out in pseduo code in comments. 